// <auto-generated />
using System;
using HorsesForCourses.Service;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HorsesForCourses.Service.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250901083037_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("HorsesForCourses.Core.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Competencies")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Coaches", (string)null);
                });

            modelBuilder.Entity("HorsesForCourses.Core.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CoachId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredCompetencies")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("HorsesForCourses.Core.Coach", b =>
                {
                    b.OwnsOne("EmailAddress", "Email", b1 =>
                        {
                            b1.Property<int>("CoachId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Email");

                            b1.HasKey("CoachId");

                            b1.ToTable("Coaches");

                            b1.WithOwner()
                                .HasForeignKey("CoachId");
                        });

                    b.OwnsMany("HorsesForCourses.Core.Booking", "bookings", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<int>("CoachId")
                                .HasColumnType("INTEGER");

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("TEXT");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("CoachId");

                            b1.ToTable("CoachBookings", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CoachId");

                            b1.OwnsMany("HorsesForCourses.Core.Timeslot", "Planning", b2 =>
                                {
                                    b2.Property<int>("BookingId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Day")
                                        .HasColumnType("TEXT")
                                        .HasColumnName("Day");

                                    b2.Property<TimeOnly>("Start")
                                        .HasColumnType("TEXT")
                                        .HasColumnName("Start");

                                    b2.Property<TimeOnly>("End")
                                        .HasColumnType("TEXT")
                                        .HasColumnName("End");

                                    b2.HasKey("BookingId", "Day", "Start", "End");

                                    b2.ToTable("BookingTimeslots", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("BookingId");
                                });

                            b1.Navigation("Planning");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("bookings");
                });

            modelBuilder.Entity("HorsesForCourses.Core.Course", b =>
                {
                    b.HasOne("HorsesForCourses.Core.Coach", "coach")
                        .WithMany("Courses")
                        .HasForeignKey("CoachId");

                    b.OwnsMany("HorsesForCourses.Core.Timeslot", "Planning", b1 =>
                        {
                            b1.Property<int>("CourseId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Day")
                                .HasColumnType("TEXT")
                                .HasColumnName("Day");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("TEXT")
                                .HasColumnName("Start");

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("TEXT")
                                .HasColumnName("End");

                            b1.HasKey("CourseId", "Day", "Start", "End");

                            b1.ToTable("CourseTimeslots", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("Planning");

                    b.Navigation("coach");
                });

            modelBuilder.Entity("HorsesForCourses.Core.Coach", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
