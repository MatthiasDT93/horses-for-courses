@using HorsesForCourses.Service


@model PagedResult<CoachListResponse>

<h2>Coaches</h2>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Email</th>
            <th># Courses Assigned</th>
            <th>Edit</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var coach in Model.Items)
        {
            <tr>
                <td>@coach.Id</td>
                <td>@coach.Name</td>
                <td>@coach.Email</td>
                <td>@coach.NumberOfCoursesAssignedTo
                <td><a class="nav-link text-dark" asp-area="" asp-controller="CoachMVC" asp-action="Details"
                        asp-route-id="@coach.Id">Details</a>
                    <a class="nav-link text-dark" asp-area="" asp-controller="CoachMVC" asp-action="EditMenu"
                        asp-route-id="@coach.Id">Edit skills</a>
                </td>
            </tr>
        }
    </tbody>
</table>


<!-- Paging -->
<div>
    @*<span>Page @Model.PageNumber of @Model.TotalPages</span>*@
    <div class="btn-group" role="group">
        @if (Model.HasPrevious)
        {
            <a href="@Url.Action("Index", new { page = Model.PageNumber - 1, pageSize = Model.PageSize })"
                class="btn btn-primary btn-sm">
                Previous
            </a>
        }
        <nav>
            <ul class="pagination">
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(Model.PageNumber == i ? "active" : "")">
                        <a class="page-link" asp-action="Index" asp-route-page="@i">@i</a>
                    </li>
                }
            </ul>
        </nav>
        @if (Model.HasNext)
        {
            <a href="@Url.Action("Index", new { page = Model.PageNumber + 1, pageSize = Model.PageSize })"
                class="btn btn-primary btn-sm">
                Next
            </a>
        }
    </div>
</div>